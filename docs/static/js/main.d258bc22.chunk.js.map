{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","console","log","trim","length","queens","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","GifExpertApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"2MAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAmBA,OACI,mCACI,sBAAMC,SAZO,SAACC,GAClBA,EAAEC,iBACFC,QAAQC,IAAI,gBAERN,EAAWO,OAAOC,OAAS,IAC3BV,GAAe,SAAAW,GAAM,OAAKT,GAAL,mBAAoBS,OACzCR,EAAc,MAMd,SAEI,uBACIS,KAAM,OACNC,MAAOX,EACPY,SAxBU,SAACT,GAIvBF,EAAcE,EAAEU,OAAOF,e,+BCZlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,0FAC6EC,UAAUH,GADvF,qBAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAIzCZ,QAAQC,IAAIiB,GAbO,kBAeZA,GAfY,4CAAH,sDCYLO,EAVK,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAE7B,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,kCAAKA,EAAL,WCHCO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAGrB,ECJwB,SAACA,GAEzB,MAA0BhB,mBAAS,CAC/BuB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAmBA,OAdAC,qBAAU,WAENxB,EAAQC,GAAUwB,MAAK,SAAAX,GACnBS,EAAS,CAACf,KAAMM,EAAQO,SAAS,SAStC,CAACpB,IAEGqB,EDjB2BI,CAAazB,GAAjCa,EAAd,EAAQN,KAAca,EAAtB,EAAsBA,QAEtB,OACI,qCACI,qBAAIJ,UAAU,oCAAd,cAAoDhB,KAClDoB,GAAW,cACb,qBAAKJ,UAAU,YAAf,SAEIH,EAAOJ,KAAK,SAACC,GAAD,OACR,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEZ7Be,EAAe,WAGxB,MAAoC1C,mBAAS,CAAC,YAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAEA,OACI,gCACI,sDACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQ4C,EAAWlB,KAAI,SAACT,GAEZ,OADAV,QAAQC,IAAI,QACL,cAAC,EAAD,CAA4BS,SAAYA,GAAvBA,YCPjC4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBN,MAAK,YAAkD,IAA/CO,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.d258bc22.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\n\nexport const AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setinputValue] = useState('')\n\n    const handleInputChange = (e) => {\n        // console.log(e.target.value);\n        // console.log(e);\n\n        setinputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        console.log('submit hecho');\n\n        if (inputValue.trim().length > 2) {\n            setCategories( queens => [inputValue, ...queens] );\n            setinputValue('');\n        }\n    }\n\n    return (\n        <>\n            <form onSubmit={handleSubmit}>\n                {/* <h1>{inputValue}</h1> */}\n                <input\n                    type =\"text\"\n                    value={inputValue}\n                    onChange = {handleInputChange}\n                />\n            </form>\n        </>\n    )\n}\n\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","export const getGifs = async(category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=hEy2PAaexCKRoojUvStG5mDerp9pKL8S&q=${ encodeURI(category) }&limit=2`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized_medium.url\n        }\n    })\n\n    console.log(gifs);\n\n    return gifs;\n}","import React from 'react'\n\nconst GifGridItem = ({id, title, url}) => {\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title} />\n            <p> {title} </p>\n        </div>\n    )\n}\n\nexport default GifGridItem\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport GifGridItem from './GifGridItem'\n\nexport const GifGrid = ({category}) => {\n\n\n    const { data: images, loading } = useFetchGifs(category);\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\"> {category}</h3>\n            { loading && 'cargando...' }\n            <div className=\"card-grid\">\n            {\n                images.map( (img) => (\n                    <GifGridItem key={img.id} {...img}/>\n                ))\n            }\n            </div>\n        </>\n    )\n}\n","import { useState, useEffect } from 'react'\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n\n        getGifs(category).then(images => {\n            setState({data: images, loading: false});\n        })\n\n        // setTimeout(() => {\n        //     getGifs(category).then(images => {\n        //         setState({data: images, loading: false});\n        //     })\n        // }, 3000);\n\n    }, [category])\n\n    return state;\n}","import React, {useState} from 'react'\nimport { AddCategory } from './components/AddCategory'\nimport { GifGrid } from './components/GifGrid'\n\nexport const GifExpertApp = () => {\n\n    // const categories = ['Aquaria', 'Jujubee', 'Trinity The Tuck']\n    const [categories, setCategories] = useState(['Aquaria'])\n\n    return (\n        <div>\n            <h2> My favorite queens </h2>\n            <AddCategory setCategories={setCategories}/>\n            <hr/>\n            {/* <button onClick={handleAdd}>Agregar</button> */}\n            <ol>\n                {\n                    categories.map((category) => {\n                        console.log('aqui')\n                        return <GifGrid key = { category } category = {category}/>\n                    })\n                }\n            </ol>\n        </div>\n    )\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {GifExpertApp} from './GifExpertApp'\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}